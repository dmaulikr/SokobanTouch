//
//  GameScene.swift
//  Sokoban
//
//  Created by –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ë. on 02.09.17.
//  Copyright ¬© 2017 –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ë. All rights reserved.
//

import SpriteKit
import GameplayKit


class GameScene: SKScene {
    
    var heroX = 0
    var heroY = 0
    static let heroIcon = "üèÉ"
    
    var recycleX = 3
    var recycleY = 3
    static let recycleIcon = "üóë"
    
    var smokeX = 2
    var smokeY = 3
    static var smokeIcon = "üö¨"
    
    let roomX = 5
    let roomY = 5
    static let roomIcon = "‚óΩÔ∏è"
    
    var newGameButton = [[SKLabelNode]()]
    
    enum Direction {
        case left
        case right
        case up
        case down
        
    }
    
    
    func removePrint() {
        for x in 0...(roomX - 1) {
            for y in 0...(roomY - 1) {
                newGameButton[x][y].removeFromParent()
            }
        }
    }
    
    func printBoard() {
        for ix in 0...(roomX - 1) {
            if ix > 0 { newGameButton.append([SKLabelNode]()) }
            
            for iy in 0...(roomY - 1) {
                
                newGameButton[ix].append(SKLabelNode())
                
                switch (ix, iy) {
                case let (x, y) where x == heroX && y == heroY:
                    newGameButton[ix][iy].text = GameScene.heroIcon
                    newGameButton[ix][iy].fontName = "Chalkboard SE Bold"  // –∑–∞–¥–∞–µ–º –∏–º—è —à—Ä–∏—Ñ—Ç–∞.
                    newGameButton[ix][iy].fontColor = SKColor.white // –∑–∞–¥–∞–µ–º —Ü–≤–µ—Ç —à—Ä–∏—Ñ—Ç–∞.
                    newGameButton[ix][iy].position = CGPoint(x: frame.minX + 100 + CGFloat(ix * 40), y: frame.midY - CGFloat(iy * 40))
                    newGameButton[ix][iy].fontSize = 40 // –∑–∞–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞.
                    newGameButton[ix][iy].name = "newGameButton[0]" // –∑–∞–¥–∞–µ–º –∏–º—è —Å–ø—Ä–∞–π—Ç–∞
                    self.addChild(newGameButton[ix][iy]) // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ü–µ–Ω—É
                    
                case let (x, y) where x == Int(recycleX) && y == Int(recycleY):
                    newGameButton[ix][iy].text = GameScene.recycleIcon
                    newGameButton[ix][iy].fontName = "Chalkboard SE Bold"  // –∑–∞–¥–∞–µ–º –∏–º—è —à—Ä–∏—Ñ—Ç–∞.
                    newGameButton[ix][iy].fontColor = SKColor.white // –∑–∞–¥–∞–µ–º —Ü–≤–µ—Ç —à—Ä–∏—Ñ—Ç–∞.
                    newGameButton[ix][iy].position = CGPoint(x: frame.minX + 100 + CGFloat(ix * 40), y: frame.midY - CGFloat(iy * 40))
                    newGameButton[ix][iy].fontSize = 40 // –∑–∞–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞.
                    newGameButton[ix][iy].name = "newGameButton[0]" // –∑–∞–¥–∞–µ–º –∏–º—è —Å–ø—Ä–∞–π—Ç–∞
                    self.addChild(newGameButton[ix][iy]) // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ü–µ–Ω—É
                    
                case let (x, y) where x == Int(smokeX) && y == Int(smokeY):
                    newGameButton[ix][iy].text = GameScene.smokeIcon
                    newGameButton[ix][iy].fontName = "Chalkboard SE Bold"  // –∑–∞–¥–∞–µ–º –∏–º—è —à—Ä–∏—Ñ—Ç–∞.
                    newGameButton[ix][iy].fontColor = SKColor.white // –∑–∞–¥–∞–µ–º —Ü–≤–µ—Ç —à—Ä–∏—Ñ—Ç–∞.
                    newGameButton[ix][iy].position = CGPoint(x: frame.minX + 100 + CGFloat(ix * 40), y: frame.midY - CGFloat(iy * 40))
                    newGameButton[ix][iy].fontSize = 40 // –∑–∞–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞.
                    newGameButton[ix][iy].name = "newGameButton[0]" // –∑–∞–¥–∞–µ–º –∏–º—è —Å–ø—Ä–∞–π—Ç–∞
                    self.addChild(newGameButton[ix][iy]) // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ü–µ–Ω—É
                    
                default:
                    newGameButton[ix][iy].text = GameScene.roomIcon
                    newGameButton[ix][iy].fontName = "Chalkboard SE Bold"  // –∑–∞–¥–∞–µ–º –∏–º—è —à—Ä–∏—Ñ—Ç–∞.
                    newGameButton[ix][iy].fontColor = SKColor.white // –∑–∞–¥–∞–µ–º —Ü–≤–µ—Ç —à—Ä–∏—Ñ—Ç–∞.
                    newGameButton[ix][iy].position = CGPoint(x: frame.minX + 100 + CGFloat(ix * 40), y: frame.midY - CGFloat(iy * 40))
                    newGameButton[ix][iy].fontSize = 40 // –∑–∞–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞.
                    newGameButton[ix][iy].name = "newGameButton[0]" // –∑–∞–¥–∞–µ–º –∏–º—è —Å–ø—Ä–∞–π—Ç–∞
                    self.addChild(newGameButton[ix][iy]) // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ü–µ–Ω—É
                }
            }
        }
    }
    
    func checkBoarders(pos: (x: Int, y: Int), dir: Direction) -> Bool {
        // –ï—Å–ª–∏ –≥–µ—Ä–æ–π –≤—ã—à–µ–ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ø–æ–ª—è.
        if pos.x < 0 || pos.x > (roomX - 1) || pos.y < 0 || pos.y > (roomY - 1) {
            print("–ù–µ–ª—å–∑—è –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ø–æ–ª—è")
            printBoard()
            return false
        }
        
        if pos.x == smokeX && pos.y == smokeY { // –µ—Å–ª–∏ –∫–æ—Ä-–¥—ã –≥–µ—Ä–æ—è —Å–æ–≤–ø–∞–ª–∏ —Å —Å–∏–≥–∞—Ä–µ—Ç–æ–π
            
            switch dir {
            case .up, .down: if smokeY - 1 < 0 || smokeY > roomY {
                print("–ù–µ–ª—å–∑—è –¥–≤–∏–≥–∞—Ç—å —Å–∏–≥–∞—Ä–µ—Ç—É –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ø–æ–ª—è")
                printBoard()
                return false
                }
            case .right, .left: if smokeX - 1 < 0 || smokeX > roomX {
                print("–ù–µ–ª—å–∑—è –¥–≤–∏–≥–∞—Ç—å —Å–∏–≥–∞—Ä–µ—Ç—É –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ø–æ–ª—è")
                printBoard()
                return false
                }
            }
        }
        
        if pos.x == recycleX && pos.y == recycleY {
            print("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–≤–∏–≥–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É!")
            printBoard()
            return false
        }
        return true
    }
    
    
    func moveHero(_ dir: Direction) {
        switch dir {
        case .up:
            if checkBoarders(pos: (x: heroX, y: heroY - 1), dir: .up) {
                if heroY - 1 == smokeY && heroX == smokeX { heroY -= 1; smokeY -= 1 } else { heroY -= 1 }
                printBoard()
                win()
            }
        case .down:
            if checkBoarders(pos: (x: heroX, y: heroY + 1), dir: .down) {
                if heroY + 1 == smokeY && heroX == smokeX { heroY += 1; smokeY += 1 } else { heroY += 1 }
                printBoard()
                win()
            }
        case .left:
            if checkBoarders(pos: (x: heroX - 1, y: heroY), dir: .left) {
                if heroX - 1 == smokeX && heroY == smokeY  { heroX -= 1; smokeX -= 1 } else { heroX -= 1 }
                printBoard()
                win()
            }
        case .right:
            if checkBoarders(pos: (x: heroX + 1, y: heroY), dir: .right) {
                if heroX + 1 == smokeX && heroY == smokeY { heroX += 1; smokeX += 1 } else { heroX += 1 }
                printBoard()
                win()
            }
        }
    }
    
    
    
    func win() {
        if smokeX == recycleX && smokeY == recycleY {
            GameScene.smokeIcon = "üóë"
            removePrint()
            printBoard()
            print("–í—ã –≤—ã–∫–∏–Ω—É–ª–∏ —Å–∏–≥–∞—Ä–µ—Ç—É –≤ –º—É—Å–æ—Ä–∫—É –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ –∏–≥—Ä–µ! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!")
            
        }
    }
    
    
    // –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —Å—Ü–µ–Ω—ã
    override func didMove(to view: SKView) {
        
        // —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ —Å—Ü–µ–Ω—ã
        backgroundColor = SKColor.black
        // –≤–µ–∫—Ç–æ—Ä –∏ —Å–∏–ª–∞ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏
        self.physicsWorld.gravity = CGVector(dx: 0, dy: 0)
        // –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ñ–∏–∑–∏–∫–∏
        self.physicsBody = SKPhysicsBody(edgeLoopFrom: frame)
        // –≤—ã–∫–ª—é—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –Ω–∞—à—É –∏–≥—Ä—É
        self.physicsBody?.allowsRotation = false
        // –≤–∫–ª—é—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        view.showsPhysics = true
        // –ø–æ–≤–æ—Ä–æ—Ç –ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–∏
        
        printBoard() // –ø–µ—á–∞—Ç–∞–µ–º –¥–æ—Å–∫—É
        
        // —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        
        // –∫–Ω–æ–ø–∫–∞ –Ω–∞–ª–µ–≤–æ
        let leftButton = SKShapeNode()
        leftButton.path = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 45, height: 45)).cgPath
        leftButton.position = CGPoint(x: view.scene!.frame.minX+30, y: view.scene!.frame.minY+30)
        leftButton.fillColor = UIColor.gray
        leftButton.strokeColor = UIColor.gray
        leftButton.lineWidth = 10
        leftButton.name = "leftButton"
        self.addChild(leftButton)
        
        
        // –∫–Ω–æ–ø–∫–∞ –Ω–∞–ø—Ä–∞–≤–æ
        let rightButton = SKShapeNode()
        rightButton.path = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 45, height: 45)).cgPath
        rightButton.position = CGPoint(x: view.scene!.frame.maxX-80, y: view.scene!.frame.minY+30)
        rightButton.fillColor = UIColor.gray
        rightButton.strokeColor = UIColor.gray
        rightButton.lineWidth = 10
        rightButton.name = "rightButton"
        self.addChild(rightButton)
        
        
        // –∫–Ω–æ–ø–∫–∞ –≤–≤–µ—Ä—Ö
        let upButton = SKShapeNode()
        upButton.path = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 45, height: 45)).cgPath
        upButton.position = CGPoint(x: view.scene!.frame.midX-30, y: view.scene!.frame.minY+100)
        upButton.fillColor = UIColor.gray
        upButton.strokeColor = UIColor.gray
        upButton.lineWidth = 10
        upButton.name = "upButton"
        self.addChild(upButton)
        
        
        // –∫–Ω–æ–ø–∫–∞ –≤–Ω–∏–∑
        let downButton = SKShapeNode()
        downButton.path = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 45, height: 45)).cgPath
        downButton.position = CGPoint(x: view.scene!.frame.midX-30, y: view.scene!.frame.minY+30)
        downButton.fillColor = UIColor.gray
        downButton.strokeColor = UIColor.gray
        downButton.lineWidth = 10
        downButton.name = "downButton"
        self.addChild(downButton)
        
        
        //            // –î–µ–ª–∞–µ–º –Ω–∞—à—É —Å—Ü–µ–Ω—É –¥–µ–ª–µ–≥–∞—Ç–æ–º —Å–æ–ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏–π
        //            self.physicsWorld.contactDelegate = self
        //
        
    }
    
    
    // –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        
        for touch: AnyObject in touches {
            let location = (touch as! UITouch).location(in: self)
            
            if let name = self.atPoint(location).name {
                if name == "newGameButton" {
                    
                    //newGameButton.isHidden = true // –ø—Ä—è—á–µ–º –Ω–∞–¥–ø–∏—Å—å
                }
            }
        }
        
        // –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏, –∫—É–¥–∞ –ø—Ä–∏–∫–æ—Å–Ω—É–ª—Å—è –ø–∞–ª–µ—Ü
        for touch in touches {
            // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞—Å–∞–Ω–∏—è –¥–ª—è —Ç–æ—á–∫–∏
            let touchLocation = touch.location(in: self)
            // –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—ä–µ–∫—Ç –ø–æ —ç—Ç–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º, –∏ –µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –Ω–µ –Ω–∞—à–∞ –ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞
            guard let touchedNode = self.atPoint(touchLocation) as? SKShapeNode,
                touchedNode.name == "leftButton" || touchedNode.name == "rightButton" || touchedNode.name == "upButton" || touchedNode.name == "downButton"
                else {
                    return
            }
            
            // –µ—Å–ª–∏ —ç—Ç–æ –Ω–∞—à–∞ –∫–Ω–æ–ø–∫–∞, –∑–∞–ª–∏–≤–∞–µ–º –µ–µ –∑–µ–ª–µ–Ω–æ–π
            touchedNode.fillColor = .green
            
            // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ –∏ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –Ω—É–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
            if touchedNode.name == "leftButton" {
                removePrint()
                moveHero(.left)
            } else if touchedNode.name == "rightButton" {
                removePrint()
                moveHero(.right)
            } else if touchedNode.name == "upButton" {
                removePrint()
                moveHero(.up)
            } else if touchedNode.name == "downButton" {
                removePrint()
                moveHero(.down)
            }
        }
    }
    
    // –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω
    override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {
        // –ø–æ–≤—Ç–æ—Ä—è–µ–º –≤—Å–µ —Ç–æ –∂–µ —Å–∞–º–æ–µ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ–≥–¥–∞ –ø–∞–ª–µ—Ü –æ—Ç—Ä—ã–≤–∞–µ—Ç—Å—è –æ—Ç —ç–∫—Ä–∞–Ω–∞
        for touch in touches {
            let touchLocation = touch.location(in: self)
            guard let touchedNode = self.atPoint(touchLocation) as? SKShapeNode,
                touchedNode.name == "leftButton" || touchedNode.name == "rightButton" || touchedNode.name == "upButton" || touchedNode.name == "downButton"
                else {
                    return
            }
            // –Ω–æ –¥–µ–ª–∞–µ–º —Ü–≤–µ—Ç —Å–Ω–æ–≤–∞ —Å–µ—Ä—ã–π
            touchedNode.fillColor = UIColor.gray
        }
    }
    // –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–±—Ä—ã–≤–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä ,–µ—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –ø—Ä–∏–º–µ—Ç –∑–≤–æ–Ω–æ–∫ –∏ —Å–≤–µ—Ä–Ω–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    override func touchesCancelled(_ touches: Set<UITouch>, with event: UIEvent?) {
    }
    // –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–¥—Ä–æ–≤ —Å—Ü–µ–Ω—ã
    override func update(_ currentTime: TimeInterval) {
        
    }
}

